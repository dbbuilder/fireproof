import{j as p}from"./vendor-8rVgzruD.js";import{b as r}from"./index-DcSKaWik.js";const o={async create(t){return(await r.post("/inspections",t)).data},async getAll(t){const e=t||{};return(await r.get("/inspections",{params:e})).data},async getById(t){return(await r.get(`/inspections/${t}`)).data},async getExtinguisherHistory(t){return(await r.get(`/inspections/extinguisher/${t}`)).data},async getInspectorInspections(t,e,n){const s={startDate:e,endDate:n};return(await r.get(`/inspections/inspector/${t}`,{params:s})).data},async verifyIntegrity(t){return(await r.post(`/inspections/${t}/verify`)).data},async getStats(t,e){const n={startDate:t,endDate:e};return(await r.get("/inspections/stats",{params:n})).data},async getOverdue(t="Monthly"){return(await r.get("/inspections/overdue",{params:{inspectionType:t}})).data},async delete(t){await r.delete(`/inspections/${t}`)}},u=p("inspections",{state:()=>({inspections:[],currentInspection:null,stats:null,loading:!1,error:null}),getters:{passedInspections:t=>t.inspections.filter(e=>e.passed),failedInspections:t=>t.inspections.filter(e=>!e.passed),inspectionsRequiringService:t=>t.inspections.filter(e=>e.requiresService),inspectionsRequiringReplacement:t=>t.inspections.filter(e=>e.requiresReplacement),inspectionCount:t=>t.inspections.length,getInspectionById:t=>e=>t.inspections.find(n=>n.inspectionId===e),inspectionsByExtinguisher:t=>{const e={};return t.inspections.forEach(n=>{const s=n.extinguisherCode||n.extinguisherId;e[s]||(e[s]=[]),e[s].push(n)}),e},inspectionsByInspector:t=>{const e={};return t.inspections.forEach(n=>{const s=n.inspectorName||n.inspectorUserId;e[s]||(e[s]=[]),e[s].push(n)}),e},inspectionsByType:t=>{const e={};return t.inspections.forEach(n=>{const s=n.inspectionType||"Unknown";e[s]||(e[s]=[]),e[s].push(n)}),e},recentInspections:t=>{const e=new Date;return e.setDate(e.getDate()-30),t.inspections.filter(n=>new Date(n.inspectionDate)>=e).sort((n,s)=>new Date(s.inspectionDate).getTime()-new Date(n.inspectionDate).getTime())},passRatePercentage:t=>t.inspections.length===0?0:t.inspections.filter(n=>n.passed).length/t.inspections.length*100},actions:{async createInspection(t){var e,n;this.loading=!0,this.error=null;try{const s=await o.create(t);return this.inspections.push(s),this.currentInspection=s,s}catch(s){throw this.error=((n=(e=s.response)==null?void 0:e.data)==null?void 0:n.message)||"Failed to create inspection",console.error("Error creating inspection:",s),s}finally{this.loading=!1}},async fetchInspections(t){var e,n;this.loading=!0,this.error=null;try{this.inspections=await o.getAll(t)}catch(s){throw this.error=((n=(e=s.response)==null?void 0:e.data)==null?void 0:n.message)||"Failed to fetch inspections",console.error("Error fetching inspections:",s),s}finally{this.loading=!1}},async fetchInspectionById(t){var e,n;this.loading=!0,this.error=null;try{return this.currentInspection=await o.getById(t),this.currentInspection}catch(s){throw this.error=((n=(e=s.response)==null?void 0:e.data)==null?void 0:n.message)||"Failed to fetch inspection",console.error("Error fetching inspection:",s),s}finally{this.loading=!1}},async fetchExtinguisherHistory(t){var e,n;this.loading=!0,this.error=null;try{const s=await o.getExtinguisherHistory(t);return s.forEach(i=>{this.inspections.findIndex(c=>c.inspectionId===i.inspectionId)===-1&&this.inspections.push(i)}),s}catch(s){throw this.error=((n=(e=s.response)==null?void 0:e.data)==null?void 0:n.message)||"Failed to fetch extinguisher history",console.error("Error fetching extinguisher history:",s),s}finally{this.loading=!1}},async fetchInspectorInspections(t,e,n){var s,i;this.loading=!0,this.error=null;try{return await o.getInspectorInspections(t,e,n)}catch(a){throw this.error=((i=(s=a.response)==null?void 0:s.data)==null?void 0:i.message)||"Failed to fetch inspector inspections",console.error("Error fetching inspector inspections:",a),a}finally{this.loading=!1}},async verifyInspectionIntegrity(t){var e,n,s;this.loading=!0,this.error=null;try{const i=await o.verifyIntegrity(t),a=this.inspections.findIndex(c=>c.inspectionId===t);return a!==-1&&(this.inspections[a]={...this.inspections[a],isVerified:i.isValid}),((e=this.currentInspection)==null?void 0:e.inspectionId)===t&&(this.currentInspection={...this.currentInspection,isVerified:i.isValid}),i}catch(i){throw this.error=((s=(n=i.response)==null?void 0:n.data)==null?void 0:s.message)||"Failed to verify inspection integrity",console.error("Error verifying inspection integrity:",i),i}finally{this.loading=!1}},async fetchStats(t,e){var n,s;this.loading=!0,this.error=null;try{return this.stats=await o.getStats(t,e),this.stats}catch(i){throw this.error=((s=(n=i.response)==null?void 0:n.data)==null?void 0:s.message)||"Failed to fetch inspection statistics",console.error("Error fetching inspection statistics:",i),i}finally{this.loading=!1}},async fetchOverdueInspections(t="Monthly"){var e,n;this.loading=!0,this.error=null;try{return await o.getOverdue(t)}catch(s){throw this.error=((n=(e=s.response)==null?void 0:e.data)==null?void 0:n.message)||"Failed to fetch overdue inspections",console.error("Error fetching overdue inspections:",s),s}finally{this.loading=!1}},async deleteInspection(t){var e,n,s;this.loading=!0,this.error=null;try{await o.delete(t),this.inspections=this.inspections.filter(i=>i.inspectionId!==t),((e=this.currentInspection)==null?void 0:e.inspectionId)===t&&(this.currentInspection=null)}catch(i){throw this.error=((s=(n=i.response)==null?void 0:n.data)==null?void 0:s.message)||"Failed to delete inspection",console.error("Error deleting inspection:",i),i}finally{this.loading=!1}},clearError(){this.error=null},clearStats(){this.stats=null}}});export{u};
