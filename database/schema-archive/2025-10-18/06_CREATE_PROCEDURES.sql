
/*
 * Database Schema Export
 * Generated by: SQL Extract v1.0.0
 * Date: 2025-10-18 16:41:01
 */

SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

-- STORED PROCEDURES

CREATE   PROCEDURE sp_SetupUserWithRole
    @Email NVARCHAR(256),
    @FirstName NVARCHAR(100),
    @LastName NVARCHAR(100),
    @PasswordHash NVARCHAR(MAX),
    @RoleName NVARCHAR(50) = 'SystemAdmin',
    @TenantId UNIQUEIDENTIFIER = NULL
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @UserId UNIQUEIDENTIFIER
    DECLARE @SystemRoleId UNIQUEIDENTIFIER
    DECLARE @ErrorMsg NVARCHAR(500)
    
    BEGIN TRY
        BEGIN TRANSACTION
        
        -- Check if user already exists
        SELECT @UserId = UserId FROM Users WHERE Email = @Email
        
        IF @UserId IS NULL
        BEGIN
            -- Create new user
            SET @UserId = NEWID()
            
            INSERT INTO Users (UserId, Email, FirstName, LastName, PasswordHash, EmailConfirmed, MfaEnabled, IsActive, CreatedDate, ModifiedDate)
            VALUES (@UserId, @Email, @FirstName, @LastName, @PasswordHash, 0, 0, 1, GETUTCDATE(), GETUTCDATE())
            
            PRINT 'User created: ' + @Email
        END
        ELSE
        BEGIN
            PRINT 'User already exists: ' + @Email
        END
        
        -- Get the role ID
        SELECT @SystemRoleId = SystemRoleId FROM SystemRoles WHERE RoleName = @RoleName
        
        IF @SystemRoleId IS NULL
        BEGIN
            SET @ErrorMsg = 'Role not found: ' + @RoleName
            RAISERROR(@ErrorMsg, 16, 1)
        END
        
        -- Check if user already has this role
        IF NOT EXISTS (SELECT 1 FROM UserSystemRoles WHERE UserId = @UserId AND SystemRoleId = @SystemRoleId)
        BEGIN
            -- Assign system role
            INSERT INTO UserSystemRoles (UserSystemRoleId, UserId, SystemRoleId, IsActive, CreatedDate)
            VALUES (NEWID(), @UserId, @SystemRoleId, 1, GETUTCDATE())
            
            PRINT 'Role ' + @RoleName + ' assigned to user'
        END
        ELSE
        BEGIN
            PRINT 'User already has ' + @RoleName + ' role'
        END
        
        -- Return user info
        SELECT 
            u.UserId,
            u.Email,
            u.FirstName,
            u.LastName,
            r.RoleName,
            usr.IsActive AS RoleIsActive,
            u.IsActive AS UserIsActive,
            u.CreatedDate
        FROM Users u
        LEFT JOIN UserSystemRoles usr ON u.UserId = usr.UserId
        LEFT JOIN SystemRoles r ON usr.SystemRoleId = r.SystemRoleId
        WHERE u.UserId = @UserId
        
        COMMIT TRANSACTION
        
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION
            
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE()
        DECLARE @ErrorSeverity INT = ERROR_SEVERITY()
        DECLARE @ErrorState INT = ERROR_STATE()
        
        RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState)
    END CATCH
END

GO


CREATE   PROCEDURE dbo.usp_Inspection_GetOverdue
    @TenantId UNIQUEIDENTIFIER,
    @DaysOverdue INT = 30
AS
BEGIN
    SET NOCOUNT ON;

    -- Get extinguishers without recent inspections based on inspection type frequency
    WITH LatestInspections AS (
        SELECT
            ExtinguisherId,
            MAX(InspectionDate) AS LastInspectionDate
        FROM dbo.Inspections
        WHERE TenantId = @TenantId
        GROUP BY ExtinguisherId
    )
    SELECT e.ExtinguisherId, e.TenantId, e.LocationId, e.ExtinguisherTypeId,
           e.AssetTag, e.BarcodeData, e.Manufacturer, e.Model, e.SerialNumber,
           l.LocationName,
           et.TypeName,
           li.LastInspectionDate,
           DATEDIFF(DAY, li.LastInspectionDate, GETUTCDATE()) AS DaysSinceInspection
    FROM dbo.Extinguishers e
    LEFT JOIN dbo.Locations l ON e.LocationId = l.LocationId
    LEFT JOIN dbo.ExtinguisherTypes et ON e.ExtinguisherTypeId = et.ExtinguisherTypeId
    LEFT JOIN LatestInspections li ON e.ExtinguisherId = li.ExtinguisherId
    WHERE e.TenantId = @TenantId
      AND e.IsActive = 1
      AND (li.LastInspectionDate IS NULL
           OR DATEDIFF(DAY, li.LastInspectionDate, GETUTCDATE()) > @DaysOverdue)
    ORDER BY li.LastInspectionDate ASC;
END;
GO


CREATE PROCEDURE [usp_Extinguisher_GetNeedingService]
      @TenantId UNIQUEIDENTIFIER
AS 
BEGIN
    SET NOCOUNT ON;

    SELECT e.ExtinguisherId,
           e.AssetTag,
           e.LocationDescription,
           l.LocationName,
           et.TypeName
    FROM [tenant_634F2B52-D32A-46DD-A045-D158E793ADCB].Extinguishers e
    INNER JOIN [tenant_634F2B52-D32A-46DD-A045-D158E793ADCB].Locations l
              ON e.LocationId=l.LocationId
    INNER JOIN [tenant_634F2B52-D32A-46DD-A045-D158E793ADCB].ExtinguisherTypes et
              ON e.ExtinguisherTypeId=et.ExtinguisherTypeId
    WHERE e.TenantId=@TenantId AND e.IsActive=0;
END;


GO


CREATE   PROCEDURE dbo.usp_Inspection_GetStats
    @TenantId UNIQUEIDENTIFIER,
    @StartDate DATETIME2 = NULL,
    @EndDate DATETIME2 = NULL
AS
BEGIN
    SET NOCOUNT ON;

    -- Default to last 30 days if no date range specified
    IF @StartDate IS NULL
        SET @StartDate = DATEADD(DAY, -30, GETUTCDATE());

    IF @EndDate IS NULL
        SET @EndDate = GETUTCDATE();

    SELECT
        COUNT(*) AS TotalInspections,
        SUM(CASE WHEN Passed = 1 THEN 1 ELSE 0 END) AS PassedInspections,
        SUM(CASE WHEN Passed = 0 THEN 1 ELSE 0 END) AS FailedInspections,
        CASE
            WHEN COUNT(*) > 0
            THEN CAST(SUM(CASE WHEN Passed = 1 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*) * 100
            ELSE 0
        END AS PassRate,
        SUM(CASE WHEN RequiresService = 1 THEN 1 ELSE 0 END) AS RequiringService,
        SUM(CASE WHEN RequiresReplacement = 1 THEN 1 ELSE 0 END) AS RequiringReplacement,
        MAX(InspectionDate) AS LastInspectionDate,
        SUM(CASE
            WHEN YEAR(InspectionDate) = YEAR(GETUTCDATE())
             AND MONTH(InspectionDate) = MONTH(GETUTCDATE())
            THEN 1
            ELSE 0
        END) AS InspectionsThisMonth,
        SUM(CASE
            WHEN YEAR(InspectionDate) = YEAR(GETUTCDATE())
            THEN 1
            ELSE 0
        END) AS InspectionsThisYear
    FROM dbo.Inspections
    WHERE TenantId = @TenantId
      AND InspectionDate >= @StartDate
      AND InspectionDate <= @EndDate;
END;

GO


-- Create in dbo schema
CREATE   PROCEDURE dbo.usp_ExtinguisherType_GetAll
AS
BEGIN
    SET NOCOUNT ON;

    SELECT ExtinguisherTypeId, TypeCode, TypeName, Description,
           MonthlyInspectionRequired, AnnualInspectionRequired,
           HydrostaticTestYears, IsActive, CreatedDate
    FROM dbo.ExtinguisherTypes
    WHERE IsActive = 1
    ORDER BY TypeName;
END;

GO

CREATE PROCEDURE [dbo].[usp_ChecklistTemplate_GetById]
    @TemplateId UNIQUEIDENTIFIER,
    @TenantId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        TemplateId,
        TenantId,
        TemplateName,
        InspectionType,
        Standard,
        IsSystemTemplate,
        IsActive,
        Description,
        CreatedDate,
        ModifiedDate
    FROM dbo.ChecklistTemplates
    WHERE TemplateId = @TemplateId
        AND TenantId = @TenantId;
END;

GO

CREATE PROCEDURE [dbo].[usp_ChecklistTemplate_GetByType]
    @InspectionType NVARCHAR(100),
    @TenantId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        TemplateId,
        TenantId,
        TemplateName,
        InspectionType,
        Standard,
        IsSystemTemplate,
        IsActive,
        Description,
        CreatedDate,
        ModifiedDate
    FROM dbo.ChecklistTemplates
    WHERE InspectionType = @InspectionType
        AND TenantId = @TenantId
        AND IsActive = 1;
END;

GO

CREATE PROCEDURE [dbo].[usp_Extinguisher_GetById]
    @ExtinguisherId UNIQUEIDENTIFIER,
    @TenantId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        e.ExtinguisherId,
        e.TenantId,
        e.LocationId,
        e.ExtinguisherTypeId,
        e.AssetTag,
        e.BarcodeData,
        e.Manufacturer,
        e.Model,
        e.SerialNumber,
        e.ManufactureDate,
        e.InstallDate,
        e.LastHydrostaticTestDate,
        e.Capacity,
        e.LocationDescription,
        e.IsActive,
        e.CreatedDate,
        e.ModifiedDate
    FROM dbo.Extinguishers e
    WHERE e.ExtinguisherId = @ExtinguisherId
        AND e.TenantId = @TenantId;
END;

GO


CREATE   PROCEDURE SQLObjectChangeLog_Track @LastXDays int = 7
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ObjectName NVARCHAR(255);
    DECLARE @SchemaName NVARCHAR(255);
    DECLARE @ObjectType NVARCHAR(50);
    DECLARE @ObjectDefinition NVARCHAR(MAX);
    DECLARE @LastModifiedDate DATETIME;
    DECLARE @OldHashValue VARBINARY(64);

    -- Cursor to iterate through all relevant objects created or modified in the last 90 days
    DECLARE db_cursor CURSOR FOR
    SELECT 
        SCHEMA_NAME(o.schema_id) AS SchemaName,
        o.name AS ObjectName,
        o.type_desc AS ObjectType,
        o.modify_date AS LastModifiedDate,
        m.definition AS ObjectDefinition
    FROM sys.objects o
    JOIN sys.sql_modules m ON o.object_id = m.object_id
    WHERE o.type IN ('P', 'V', 'FN', 'TF', 'IF') -- Procedures, Views, Scalar/Inline/Multi-Statement Functions
    AND (@LastXDays is null or o.modify_date >= DATEADD(DAY, -1 * @LastXDays, GETDATE())) -- Limit to objects modified in the last 90 days

    OPEN db_cursor;

    FETCH NEXT FROM db_cursor INTO @SchemaName, @ObjectName, @ObjectType, @LastModifiedDate, @ObjectDefinition;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Retrieve the old hash value (if it exists)
        SELECT TOP 1 @OldHashValue = HashValue 
        FROM SQLObjectChangeLog
        WHERE ObjectName = @ObjectName AND SchemaName = @SchemaName AND ObjectType = @ObjectType
        ORDER BY DateLogged DESC;

        -- Compute new hash value for the object definition
        DECLARE @NewHashValue VARBINARY(64) = HASHBYTES('SHA2_256', @ObjectDefinition);

        -- If @OldHashValue is NULL, it means the object does not exist in the log
        IF @OldHashValue IS NULL
        BEGIN
            -- Insert new log entry if the object does not exist in the log
            INSERT INTO SQLObjectChangeLog (ObjectName, SchemaName, ObjectType, LastModifiedDate, ObjectDefinition)
            VALUES (@ObjectName, @SchemaName, @ObjectType, @LastModifiedDate, @ObjectDefinition);
        END
        ELSE IF @OldHashValue != @NewHashValue
        BEGIN
            -- Insert new log entry if the hash value has changed
            INSERT INTO SQLObjectChangeLog (ObjectName, SchemaName, ObjectType, LastModifiedDate, ObjectDefinition)
            VALUES (@ObjectName, @SchemaName, @ObjectType, @LastModifiedDate, @ObjectDefinition);
        END

        FETCH NEXT FROM db_cursor INTO @SchemaName, @ObjectName, @ObjectType, @LastModifiedDate, @ObjectDefinition;
    END

    CLOSE db_cursor;
    DEALLOCATE db_cursor;

END
GO

CREATE PROCEDURE [dbo].[usp_Inspection_GetById]
    @InspectionId UNIQUEIDENTIFIER,
    @TenantId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        i.InspectionId,
        i.TenantId,
        i.ExtinguisherId,
        i.InspectionTypeId,
        i.InspectorUserId,
        i.InspectionDate,
        i.Passed,
        i.IsAccessible,
        i.HasObstructions,
        i.SignageVisible,
        i.SealIntact,
        i.PinInPlace,
        i.NozzleClear,
        i.HoseConditionGood,
        i.GaugeInGreenZone,
        i.GaugePressurePsi,
        i.PhysicalDamagePresent,
        i.InspectionTagAttached,
        i.RequiresService,
        i.RequiresReplacement,
        i.Notes,
        i.FailureReason,
        i.CorrectiveAction,
        i.GpsLatitude,
        i.GpsLongitude,
        i.DeviceId,
        i.TamperProofHash,
        i.PreviousInspectionHash,
        i.CreatedDate,
        i.InspectionType,
        i.GpsAccuracyMeters,
        i.LocationVerified,
        i.DamageDescription,
        i.WeightPounds,
        i.WeightWithinSpec,
        i.PreviousInspectionDate,
        i.PhotoUrls,
        i.DataHash,
        i.InspectorSignature,
        i.SignedDate,
        i.IsVerified,
        i.ModifiedDate
    FROM dbo.Inspections i
    WHERE i.InspectionId = @InspectionId
        AND i.TenantId = @TenantId;
END;

GO



CREATE   PROCEDURE SQLObjectChangeLog_Notify
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Subject NVARCHAR(255) = 'SQL CODE CHANGES -' + DB_Name();
    DECLARE @Body NVARCHAR(MAX);
    DECLARE @Recipient NVARCHAR(255) = 'sql@schoolvision.net';

    -- Check if there are any changes since the last time this procedure was executed
    DECLARE @Changes TABLE (
        SQLObjectSQLObjectChangeLogID INT,
        ObjectName NVARCHAR(255),
        SchemaName NVARCHAR(255),
        ObjectType NVARCHAR(50),
        LastModifiedDate DATETIME
    );

    INSERT INTO @Changes
    SELECT SQLObjectChangeLogID, ObjectName, SchemaName, ObjectType, LastModifiedDate
    FROM SQLObjectChangeLog
    WHERE DateNotified is null;  -- Assuming we run hourly. Modify as needed.

    IF EXISTS (SELECT 1 FROM @Changes)
    BEGIN
        SET @Body = 'The following SQL Server code objects have changed:' + CHAR(10) + CHAR(10);
        
        SELECT 
            SchemaName , ObjectName , ObjectType  LastModifiedDate 
			into #tmpChanges
        FROM @Changes;


        SELECT @Body = @Body + 
            ' ' + ObjectType + ':  ' + ObjectName +  ' (' + schemaname +') - Modified on: ' + 
            CAST(LastModifiedDate AS NVARCHAR) + CHAR(10)
        FROM @Changes order by ObjectType, ObjectName;

		declare @d int = -1;
        -- Send Email
        EXEC @d = msdb.dbo.sp_send_dbmail
            @profile_name = 'Main',  -- Assuming 'Main' is your mail profile
            @recipients = @Recipient,
            @subject = @Subject,
            @body = @Body;
		if @d > 0
			update SQLObjectChangeLog set DateNotified = getdate() where SQLObjectChangeLogID in (Select SQLObjectSQLObjectChangeLogID from @Changes)
    END
END

GO

CREATE PROCEDURE [dbo].[usp_InspectionChecklistResponse_GetByInspection]
    @InspectionId UNIQUEIDENTIFIER,
    @TenantId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        ResponseId,
        InspectionId,
        ChecklistItemId,
        Response,
        Comment,
        PhotoId,
        CreatedDate,
        TenantId
    FROM dbo.InspectionChecklistResponses
    WHERE InspectionId = @InspectionId
        AND TenantId = @TenantId;
END;

GO



create    procedure SQLObjectChangeLog_Setup AS
if not exists(select * From sysobjects where name = 'SQLObjectChangeLog')
begin
CREATE TABLE SQLObjectChangeLog (
    SQLObjectChangeLogID INT IDENTITY(1,1) PRIMARY KEY,
    ObjectName NVARCHAR(255),
    SchemaName NVARCHAR(255),
    ObjectType NVARCHAR(50),
    LastModifiedDate DATETIME,
    ObjectDefinition NVARCHAR(MAX),
    DateLogged DATETIME DEFAULT GETDATE(),
	DateNotified datetime, 
    HashValue AS CAST(HASHBYTES('SHA2_256', ObjectDefinition) AS VARBINARY(64)) PERSISTED
)

if not exists(select * From sysindexes where name = 'IX_SQLObjectChangeLog_SchemaObject')
begin
-- Create indexes to improve query performance
CREATE INDEX IX_SQLObjectChangeLog_SchemaObject ON SQLObjectChangeLog (SchemaName, ObjectName, ObjectType);
end

if not exists(select * From sysindexes where name = 'IX_SQLObjectChangeLog_DateLogged')
begin
CREATE INDEX IX_SQLObjectChangeLog_DateLogged ON SQLObjectChangeLog (DateLogged);
end


if not exists(select * From sysindexes where name = 'IX_SQLObjectChangeLog_HashValue')
begin
CREATE INDEX IX_SQLObjectChangeLog_HashValue ON SQLObjectChangeLog (HashValue);
end

Exec SQLObjectChangeLog_Track NULL
update SQLObjectChangeLog set DateNotified = getdate()

end

GO

CREATE PROCEDURE [dbo].[usp_InspectionDeficiency_Create]
    @DeficiencyId UNIQUEIDENTIFIER OUTPUT,
    @InspectionId UNIQUEIDENTIFIER,
    @DeficiencyType NVARCHAR(100),
    @Severity NVARCHAR(50),
    @Description NVARCHAR(MAX),
    @ActionRequired NVARCHAR(MAX) = NULL,
    @EstimatedCost DECIMAL(10,2) = NULL,
    @TenantId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    IF @DeficiencyId IS NULL
        SET @DeficiencyId = NEWID();

    INSERT INTO dbo.InspectionDeficiencies (
        DeficiencyId,
        InspectionId,
        DeficiencyType,
        Severity,
        Description,
        Status,
        ActionRequired,
        EstimatedCost,
        TenantId,
        CreatedDate,
        ModifiedDate
    ) VALUES (
        @DeficiencyId,
        @InspectionId,
        @DeficiencyType,
        @Severity,
        @Description,
        'Open',
        @ActionRequired,
        @EstimatedCost,
        @TenantId,
        GETUTCDATE(),
        GETUTCDATE()
    );

    SELECT @DeficiencyId AS DeficiencyId;
END;

GO

CREATE PROCEDURE [dbo].[usp_InspectionDeficiency_GetByInspection]
    @InspectionId UNIQUEIDENTIFIER,
    @TenantId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        DeficiencyId,
        InspectionId,
        DeficiencyType,
        Severity,
        Description,
        Status,
        ActionRequired,
        EstimatedCost,
        AssignedToUserId,
        DueDate,
        ResolutionNotes,
        ResolvedDate,
        ResolvedByUserId,
        PhotoIds,
        TenantId,
        CreatedDate,
        ModifiedDate
    FROM dbo.InspectionDeficiencies
    WHERE InspectionId = @InspectionId
        AND TenantId = @TenantId;
END;

GO

CREATE PROCEDURE [dbo].[usp_InspectionDeficiency_Resolve]
    @DeficiencyId UNIQUEIDENTIFIER,
    @ResolvedByUserId UNIQUEIDENTIFIER,
    @ResolutionNotes NVARCHAR(MAX) = NULL,
    @TenantId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE dbo.InspectionDeficiencies
    SET
        Status = 'Resolved',
        ResolvedDate = GETUTCDATE(),
        ResolvedByUserId = @ResolvedByUserId,
        ResolutionNotes = @ResolutionNotes,
        ModifiedDate = GETUTCDATE()
    WHERE DeficiencyId = @DeficiencyId
        AND TenantId = @TenantId;
END;

GO

CREATE PROCEDURE [dbo].[usp_InspectionPhoto_Create]
    @PhotoId UNIQUEIDENTIFIER OUTPUT,
    @InspectionId UNIQUEIDENTIFIER,
    @PhotoType NVARCHAR(50),
    @BlobUrl NVARCHAR(500),
    @ThumbnailUrl NVARCHAR(500) = NULL,
    @FileSize BIGINT = NULL,
    @MimeType NVARCHAR(100) = NULL,
    @Notes NVARCHAR(MAX) = NULL,
    @TenantId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    IF @PhotoId IS NULL
        SET @PhotoId = NEWID();

    INSERT INTO dbo.InspectionPhotos (
        PhotoId,
        InspectionId,
        PhotoType,
        BlobUrl,
        ThumbnailUrl,
        FileSize,
        MimeType,
        CaptureDate,
        Notes,
        TenantId,
        CreatedDate
    ) VALUES (
        @PhotoId,
        @InspectionId,
        @PhotoType,
        @BlobUrl,
        @ThumbnailUrl,
        @FileSize,
        @MimeType,
        GETUTCDATE(),
        @Notes,
        @TenantId,
        GETUTCDATE()
    );

    SELECT @PhotoId AS PhotoId;
END;

GO

CREATE PROCEDURE [dbo].[usp_InspectionPhoto_GetByInspection]
    @InspectionId UNIQUEIDENTIFIER,
    @TenantId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        PhotoId,
        InspectionId,
        PhotoType,
        BlobUrl,
        ThumbnailUrl,
        FileSize,
        MimeType,
        CaptureDate,
        Latitude,
        Longitude,
        DeviceModel,
        EXIFData,
        Notes,
        TenantId,
        CreatedDate
    FROM dbo.InspectionPhotos
    WHERE InspectionId = @InspectionId
        AND TenantId = @TenantId;
END;

GO

CREATE PROCEDURE [dbo].[usp_InspectionPhoto_GetByType]
    @InspectionId UNIQUEIDENTIFIER,
    @PhotoType NVARCHAR(50),
    @TenantId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        PhotoId,
        InspectionId,
        PhotoType,
        BlobUrl,
        ThumbnailUrl,
        FileSize,
        MimeType,
        CaptureDate,
        Latitude,
        Longitude,
        DeviceModel,
        EXIFData,
        Notes,
        TenantId,
        CreatedDate
    FROM dbo.InspectionPhotos
    WHERE InspectionId = @InspectionId
        AND PhotoType = @PhotoType
        AND TenantId = @TenantId;
END;

GO


CREATE   PROCEDURE dbo.usp_Tenant_GetAll
AS
BEGIN
    SET NOCOUNT ON;

    SELECT TenantId, TenantCode, CompanyName, SubscriptionTier,
           IsActive, MaxLocations, MaxUsers, MaxExtinguishers,
           DatabaseSchema, CreatedDate, ModifiedDate
    FROM dbo.Tenants
    WHERE IsActive = 1
    ORDER BY CompanyName;
END;
GO

CREATE PROCEDURE [dbo].[usp_Location_GetById]
    @LocationId UNIQUEIDENTIFIER,
    @TenantId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        LocationId,
        TenantId,
        LocationCode,
        LocationName,
        AddressLine1,
        AddressLine2,
        City,
        StateProvince,
        PostalCode,
        Country,
        ContactName,
        ContactPhone,
        ContactEmail,
        IsActive,
        CreatedDate,
        ModifiedDate,
        Latitude,
        Longitude,
        LocationBarcodeData
    FROM dbo.Locations
    WHERE LocationId = @LocationId
        AND TenantId = @TenantId;
END;

GO


CREATE   PROCEDURE dbo.usp_Tenant_GetById
    @TenantId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    SELECT TenantId, TenantCode, CompanyName, SubscriptionTier,
           IsActive, MaxLocations, MaxUsers, MaxExtinguishers,
           DatabaseSchema, CreatedDate, ModifiedDate
    FROM dbo.Tenants
    WHERE TenantId = @TenantId;
END;
GO

CREATE PROCEDURE [dbo].[usp_UserTenantRole_GetByUser]
    @UserId UNIQUEIDENTIFIER,
    @TenantId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        utr.UserTenantRoleId,
        utr.UserId,
        utr.TenantId,
        utr.RoleName,
        utr.IsActive,
        utr.CreatedDate,
        t.CompanyName AS TenantName,
        t.SubscriptionTier
    FROM dbo.UserTenantRoles utr
    INNER JOIN dbo.Tenants t ON utr.TenantId = t.TenantId
    WHERE utr.UserId = @UserId
        AND utr.TenantId = @TenantId;
END;

GO


CREATE   PROCEDURE dbo.usp_Tenant_GetAvailableForUser
    @UserId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    -- Get tenants the user has access to via UserTenantRoles
    SELECT DISTINCT t.TenantId, t.TenantCode, t.CompanyName, t.SubscriptionTier,
           t.IsActive, t.MaxLocations, t.MaxUsers, t.MaxExtinguishers,
           t.DatabaseSchema, t.CreatedDate, t.ModifiedDate,
           utr.RoleName AS UserRole
    FROM dbo.Tenants t
    INNER JOIN dbo.UserTenantRoles utr ON t.TenantId = utr.TenantId
    WHERE utr.UserId = @UserId
      AND t.IsActive = 1
      AND utr.IsActive = 1
    ORDER BY t.CompanyName;
END;
GO


CREATE PROCEDURE dbo.usp_Tenant_Create
    @TenantCode NVARCHAR(50),
    @CompanyName NVARCHAR(200),
    @SubscriptionTier NVARCHAR(50) = 'Free',
    @MaxLocations INT = 10,
    @MaxUsers INT = 5,
    @MaxExtinguishers INT = 100
AS
BEGIN
    SET NOCOUNT ON

    DECLARE @NewTenantId UNIQUEIDENTIFIER = NEWID()
    DECLARE @DatabaseSchema NVARCHAR(128) = 'tenant_' + CAST(@NewTenantId AS NVARCHAR(36))

    -- Validate subscription tier
    IF @SubscriptionTier NOT IN ('Free', 'Standard', 'Premium')
    BEGIN
        RAISERROR('Invalid subscription tier. Must be Free, Standard, or Premium', 16, 1)
        RETURN
    END

    -- Check if tenant code already exists
    IF EXISTS (SELECT 1 FROM dbo.Tenants WHERE TenantCode = @TenantCode)
    BEGIN
        RAISERROR('Tenant code already exists', 16, 1)
        RETURN
    END

    -- Insert new tenant
    INSERT INTO dbo.Tenants (
        TenantId,
        TenantCode,
        CompanyName,
        SubscriptionTier,
        IsActive,
        MaxLocations,
        MaxUsers,
        MaxExtinguishers,
        DatabaseSchema,
        CreatedDate,
        ModifiedDate
    )
    VALUES (
        @NewTenantId,
        @TenantCode,
        @CompanyName,
        @SubscriptionTier,
        1, -- IsActive
        @MaxLocations,
        @MaxUsers,
        @MaxExtinguishers,
        @DatabaseSchema,
        GETUTCDATE(),
        GETUTCDATE()
    )

    -- Return the new tenant
    SELECT
        TenantId,
        TenantCode,
        CompanyName AS TenantName,
        SubscriptionTier,
        IsActive,
        MaxLocations,
        MaxUsers,
        MaxExtinguishers,
        DatabaseSchema,
        CreatedDate,
        ModifiedDate
    FROM dbo.Tenants
    WHERE TenantId = @NewTenantId
END

GO


CREATE   PROCEDURE dbo.usp_Tenant_Update
    @TenantId UNIQUEIDENTIFIER,
    @TenantCode NVARCHAR(50),
    @CompanyName NVARCHAR(200),
    @SubscriptionTier NVARCHAR(50),
    @MaxLocations INT,
    @MaxUsers INT,
    @MaxExtinguishers INT,
    @IsActive BIT = 1
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE dbo.Tenants
    SET TenantCode = @TenantCode,
        CompanyName = @CompanyName,
        SubscriptionTier = @SubscriptionTier,
        MaxLocations = @MaxLocations,
        MaxUsers = @MaxUsers,
        MaxExtinguishers = @MaxExtinguishers,
        IsActive = @IsActive,
        ModifiedDate = GETUTCDATE()
    WHERE TenantId = @TenantId;

    -- Return updated tenant
    SELECT TenantId, TenantCode, CompanyName, SubscriptionTier,
           IsActive, MaxLocations, MaxUsers, MaxExtinguishers,
           DatabaseSchema, CreatedDate, ModifiedDate
    FROM dbo.Tenants
    WHERE TenantId = @TenantId;
END;
GO


CREATE   PROCEDURE dbo.usp_CreateSuperAdmin
    @FirstName NVARCHAR(100),
    @LastName NVARCHAR(100),
    @Email NVARCHAR(256),
    @TemplateUserEmail NVARCHAR(256) = 'chris@servicevision.net', -- Default template user
    @DefaultPassword NVARCHAR(256) = 'FireProofIt!' -- Default password (will be hashed)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @NewUserId UNIQUEIDENTIFIER = NEWID();
    DECLARE @TemplateUserId UNIQUEIDENTIFIER;
    DECLARE @ErrorMessage NVARCHAR(4000);

    -- Default password hash for "FireProofIt!" (BCrypt WorkFactor 12)
    DECLARE @PasswordHash NVARCHAR(MAX) = '$2a$12$bVHRanQb9FoMMLeU2Hob3en990lJPsop/vaTVtb8YUssNBF.9S7GW';
    DECLARE @PasswordSalt NVARCHAR(MAX) = '$2a$12$bVHRanQb9FoMMLeU2Hob3e';

    BEGIN TRY
        BEGIN TRANSACTION;

        -- Validate email doesn't already exist
        IF EXISTS (SELECT 1 FROM dbo.Users WHERE Email = @Email)
        BEGIN
            SET @ErrorMessage = 'User with email ' + @Email + ' already exists';
            THROW 50001, @ErrorMessage, 1;
        END

        -- Get template user
        SELECT @TemplateUserId = UserId
        FROM dbo.Users
        WHERE Email = @TemplateUserEmail;

        IF @TemplateUserId IS NULL
        BEGIN
            SET @ErrorMessage = 'Template user not found: ' + @TemplateUserEmail;
            THROW 50002, @ErrorMessage, 1;
        END

        -- Create the new user
        INSERT INTO dbo.Users (
            UserId,
            Email,
            FirstName,
            LastName,
            AzureAdB2CObjectId,
            IsActive,
            CreatedDate,
            ModifiedDate,
            PasswordHash,
            PasswordSalt,
            RefreshToken,
            RefreshTokenExpiryDate,
            LastLoginDate,
            EmailConfirmed,
            PhoneNumber,
            MfaEnabled
        )
        VALUES (
            @NewUserId,
            @Email,
            @FirstName,
            @LastName,
            NULL,
            1, -- IsActive
            GETUTCDATE(),
            GETUTCDATE(),
            @PasswordHash,
            @PasswordSalt,
            NULL,
            NULL,
            NULL,
            0, -- EmailConfirmed
            NULL,
            0  -- MfaEnabled
        );

        PRINT 'Created user: ' + @FirstName + ' ' + @LastName + ' (' + @Email + ')';
        PRINT 'UserId: ' + CAST(@NewUserId AS NVARCHAR(36));

        -- Copy SystemRoles from template user
        INSERT INTO dbo.UserSystemRoles (
            UserSystemRoleId,
            UserId,
            SystemRoleId,
            IsActive,
            CreatedDate
        )
        SELECT
            NEWID(),
            @NewUserId,
            usr.SystemRoleId,
            1,
            GETUTCDATE()
        FROM dbo.UserSystemRoles usr
        WHERE usr.UserId = @TemplateUserId
        AND usr.IsActive = 1;

        DECLARE @SystemRolesCount INT = @@ROWCOUNT;
        PRINT 'Copied ' + CAST(@SystemRolesCount AS NVARCHAR(10)) + ' system role(s)';

        -- Copy TenantRoles from template user
        INSERT INTO dbo.UserTenantRoles (
            UserTenantRoleId,
            UserId,
            TenantId,
            RoleName,
            IsActive,
            CreatedDate
        )
        SELECT
            NEWID(),
            @NewUserId,
            utr.TenantId,
            utr.RoleName,
            1,
            GETUTCDATE()
        FROM dbo.UserTenantRoles utr
        WHERE utr.UserId = @TemplateUserId
        AND utr.IsActive = 1;

        DECLARE @TenantRolesCount INT = @@ROWCOUNT;
        PRINT 'Copied ' + CAST(@TenantRolesCount AS NVARCHAR(10)) + ' tenant role(s)';

        COMMIT TRANSACTION;

        -- Return summary
        SELECT
            @NewUserId AS UserId,
            @Email AS Email,
            @FirstName + ' ' + @LastName AS FullName,
            @SystemRolesCount AS SystemRolesAssigned,
            @TenantRolesCount AS TenantRolesAssigned,
            'User created successfully. Default password: ' + @DefaultPassword AS Message;

        -- Show assigned roles
        PRINT '';
        PRINT 'System Roles:';
        SELECT
            sr.RoleName,
            sr.Description
        FROM dbo.UserSystemRoles usr
        JOIN dbo.SystemRoles sr ON usr.SystemRoleId = sr.SystemRoleId
        WHERE usr.UserId = @NewUserId;

        PRINT '';
        PRINT 'Tenant Roles:';
        SELECT
            t.CompanyName AS Tenant,
            utr.RoleName
        FROM dbo.UserTenantRoles utr
        JOIN dbo.Tenants t ON utr.TenantId = t.TenantId
        WHERE utr.UserId = @NewUserId;

    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @ErrorMessage = ERROR_MESSAGE();
        THROW 50000, @ErrorMessage, 1;
    END CATCH
END

GO


CREATE PROCEDURE dbo.usp_User_Create
    @Email NVARCHAR(256),
    @FirstName NVARCHAR(100),
    @LastName NVARCHAR(100),
    @AzureAdB2CObjectId NVARCHAR(128) = NULL,
    @UserId UNIQUEIDENTIFIER OUTPUT
AS
BEGIN
    SET NOCOUNT ON

    BEGIN TRY
        -- Check if user already exists
        IF EXISTS (SELECT 1 FROM dbo.Users WHERE Email = @Email AND IsActive = 1)
        BEGIN
            SELECT @UserId = UserId FROM dbo.Users WHERE Email = @Email AND IsActive = 1
            SELECT @UserId AS UserId, 'USER_EXISTS' AS Status
            RETURN
        END

        SET @UserId = NEWID()

        INSERT INTO dbo.Users (UserId, Email, FirstName, LastName, AzureAdB2CObjectId, IsActive)
        VALUES (@UserId, @Email, @FirstName, @LastName, @AzureAdB2CObjectId, 1)

        SELECT @UserId AS UserId, 'SUCCESS' AS Status
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE()
        RAISERROR(@ErrorMessage, 16, 1)
    END CATCH
END

GO


CREATE PROCEDURE dbo.usp_UserTenantRole_Assign
    @UserId UNIQUEIDENTIFIER,
    @TenantId UNIQUEIDENTIFIER,
    @RoleName NVARCHAR(50),
    @AssignedByUserId UNIQUEIDENTIFIER = NULL
AS
BEGIN
    SET NOCOUNT ON

    BEGIN TRY
        -- Check if role assignment already exists
        IF EXISTS (
            SELECT 1 FROM dbo.UserTenantRoles
            WHERE UserId = @UserId
            AND TenantId = @TenantId
            AND RoleName = @RoleName
            AND IsActive = 1
        )
        BEGIN
            SELECT 'ROLE_EXISTS' AS Status
            RETURN
        END

        DECLARE @RoleId UNIQUEIDENTIFIER = NEWID()

        INSERT INTO dbo.UserTenantRoles (UserTenantRoleId, UserId, TenantId, RoleName, IsActive)
        VALUES (@RoleId, @UserId, @TenantId, @RoleName, 1)

        -- Log audit event
        INSERT INTO dbo.AuditLog (TenantId, UserId, Action, EntityType, EntityId, NewValues)
        VALUES (@TenantId, @AssignedByUserId, 'AssignRole', 'UserTenantRole',
                CAST(@RoleId AS NVARCHAR(36)),
                '{"UserId":"' + CAST(@UserId AS NVARCHAR(36)) + '","RoleName":"' + @RoleName + '"}')

        SELECT 'SUCCESS' AS Status, @RoleId AS UserTenantRoleId
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE()
        RAISERROR(@ErrorMessage, 16, 1)
    END CATCH
END

GO


CREATE PROCEDURE dbo.usp_AuditLog_Insert
    @TenantId UNIQUEIDENTIFIER,
    @UserId UNIQUEIDENTIFIER = NULL,
    @Action NVARCHAR(100),
    @EntityType NVARCHAR(100) = NULL,
    @EntityId NVARCHAR(128) = NULL,
    @OldValues NVARCHAR(MAX) = NULL,
    @NewValues NVARCHAR(MAX) = NULL,
    @IpAddress NVARCHAR(45) = NULL,
    @UserAgent NVARCHAR(500) = NULL
AS
BEGIN
    SET NOCOUNT ON

    INSERT INTO dbo.AuditLog (
        TenantId, UserId, Action, EntityType, EntityId,
        OldValues, NewValues, IpAddress, UserAgent
    )
    VALUES (
        @TenantId, @UserId, @Action, @EntityType, @EntityId,
        @OldValues, @NewValues, @IpAddress, @UserAgent
    )

    SELECT 'SUCCESS' AS Status
END

GO


CREATE PROCEDURE dbo.usp_AuditLog_GetByTenant
    @TenantId UNIQUEIDENTIFIER,
    @StartDate DATETIME2 = NULL,
    @EndDate DATETIME2 = NULL,
    @Action NVARCHAR(100) = NULL,
    @PageSize INT = 100,
    @PageNumber INT = 1
AS
BEGIN
    SET NOCOUNT ON

    SELECT
        AuditLogId,
        TenantId,
        UserId,
        Action,
        EntityType,
        EntityId,
        OldValues,
        NewValues,
        IpAddress,
        UserAgent,
        Timestamp
    FROM dbo.AuditLog
    WHERE TenantId = @TenantId
    AND (@StartDate IS NULL OR Timestamp >= @StartDate)
    AND (@EndDate IS NULL OR Timestamp <= @EndDate)
    AND (@Action IS NULL OR Action = @Action)
    ORDER BY Timestamp DESC
    OFFSET (@PageNumber - 1) * @PageSize ROWS
    FETCH NEXT @PageSize ROWS ONLY
END

GO


CREATE   PROCEDURE dbo.usp_ExtinguisherType_GetById
    @ExtinguisherTypeId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    SELECT ExtinguisherTypeId, TypeCode, TypeName, Description,
           MonthlyInspectionRequired, AnnualInspectionRequired,
           HydrostaticTestYears, IsActive, CreatedDate
    FROM dbo.ExtinguisherTypes
    WHERE ExtinguisherTypeId = @ExtinguisherTypeId;
END;

GO


CREATE   PROCEDURE dbo.usp_ExtinguisherType_Create
    @ExtinguisherTypeId UNIQUEIDENTIFIER,
    @TypeCode NVARCHAR(50),
    @TypeName NVARCHAR(200),
    @Description NVARCHAR(MAX) = NULL,
    @MonthlyInspectionRequired BIT = 1,
    @AnnualInspectionRequired BIT = 1,
    @HydrostaticTestYears INT = NULL
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO dbo.ExtinguisherTypes (
        ExtinguisherTypeId, TypeCode, TypeName, Description,
        MonthlyInspectionRequired, AnnualInspectionRequired,
        HydrostaticTestYears, IsActive, CreatedDate
    )
    VALUES (
        @ExtinguisherTypeId, @TypeCode, @TypeName, @Description,
        @MonthlyInspectionRequired, @AnnualInspectionRequired,
        @HydrostaticTestYears, 1, GETUTCDATE()
    );

    SELECT ExtinguisherTypeId, TypeCode, TypeName, Description,
           MonthlyInspectionRequired, AnnualInspectionRequired,
           HydrostaticTestYears, IsActive, CreatedDate
    FROM dbo.ExtinguisherTypes
    WHERE ExtinguisherTypeId = @ExtinguisherTypeId;
END;

GO


CREATE   PROCEDURE dbo.usp_ExtinguisherType_Update
    @ExtinguisherTypeId UNIQUEIDENTIFIER,
    @TypeCode NVARCHAR(50),
    @TypeName NVARCHAR(200),
    @Description NVARCHAR(MAX) = NULL,
    @MonthlyInspectionRequired BIT = 1,
    @AnnualInspectionRequired BIT = 1,
    @HydrostaticTestYears INT = NULL,
    @IsActive BIT = 1
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE dbo.ExtinguisherTypes
    SET TypeCode = @TypeCode,
        TypeName = @TypeName,
        Description = @Description,
        MonthlyInspectionRequired = @MonthlyInspectionRequired,
        AnnualInspectionRequired = @AnnualInspectionRequired,
        HydrostaticTestYears = @HydrostaticTestYears,
        IsActive = @IsActive
    WHERE ExtinguisherTypeId = @ExtinguisherTypeId;

    SELECT ExtinguisherTypeId, TypeCode, TypeName, Description,
           MonthlyInspectionRequired, AnnualInspectionRequired,
           HydrostaticTestYears, IsActive, CreatedDate
    FROM dbo.ExtinguisherTypes
    WHERE ExtinguisherTypeId = @ExtinguisherTypeId;
END;

GO


-- ============================================================================
-- INSPECTION TYPES (Tenant-Specific - WITH TenantId)
-- ============================================================================

CREATE   PROCEDURE dbo.usp_InspectionType_GetAll
    @TenantId UNIQUEIDENTIFIER = NULL  -- Optional: NULL returns all, specific ID filters by tenant
AS
BEGIN
    SET NOCOUNT ON;

    SELECT InspectionTypeId, TenantId, TypeName, Description,
           RequiresServiceTechnician, FrequencyDays, IsActive, CreatedDate
    FROM dbo.InspectionTypes
    WHERE (@TenantId IS NULL OR TenantId = @TenantId)
      AND IsActive = 1
    ORDER BY TypeName;
END;

GO


CREATE   PROCEDURE dbo.usp_InspectionType_GetById
    @InspectionTypeId UNIQUEIDENTIFIER,
    @TenantId UNIQUEIDENTIFIER = NULL
AS
BEGIN
    SET NOCOUNT ON;

    SELECT InspectionTypeId, TenantId, TypeName, Description,
           RequiresServiceTechnician, FrequencyDays, IsActive, CreatedDate
    FROM dbo.InspectionTypes
    WHERE InspectionTypeId = @InspectionTypeId
      AND (@TenantId IS NULL OR TenantId = @TenantId);
END;

GO


CREATE   PROCEDURE dbo.usp_InspectionType_Create
    @InspectionTypeId UNIQUEIDENTIFIER,
    @TenantId UNIQUEIDENTIFIER,
    @TypeName NVARCHAR(200),
    @Description NVARCHAR(MAX) = NULL,
    @RequiresServiceTechnician BIT = 0,
    @FrequencyDays INT = 365
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO dbo.InspectionTypes (
        InspectionTypeId, TenantId, TypeName, Description,
        RequiresServiceTechnician, FrequencyDays, IsActive, CreatedDate
    )
    VALUES (
        @InspectionTypeId, @TenantId, @TypeName, @Description,
        @RequiresServiceTechnician, @FrequencyDays, 1, GETUTCDATE()
    );

    SELECT InspectionTypeId, TenantId, TypeName, Description,
           RequiresServiceTechnician, FrequencyDays, IsActive, CreatedDate
    FROM dbo.InspectionTypes
    WHERE InspectionTypeId = @InspectionTypeId;
END;

GO


CREATE PROCEDURE dbo.[usp_Extinguisher_Delete]
      @ExtinguisherId UNIQUEIDENTIFIER
AS 
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        UPDATE dbo.Extinguishers SET IsActive = 0, ModifiedDate = GETUTCDATE()
        WHERE ExtinguisherId=@ExtinguisherId;

        COMMIT TRANSACTION;

        SELECT 'SUCCESS' AS Status;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT>0
            ROLLBACK TRANSACTION THROW;
    END CATCH;
END;


GO


CREATE   PROCEDURE dbo.usp_Location_Create
    @LocationId UNIQUEIDENTIFIER,
    @TenantId UNIQUEIDENTIFIER,
    @LocationCode NVARCHAR(50),
    @LocationName NVARCHAR(200),
    @AddressLine1 NVARCHAR(200) = NULL,
    @AddressLine2 NVARCHAR(200) = NULL,
    @City NVARCHAR(100) = NULL,
    @StateProvince NVARCHAR(100) = NULL,
    @PostalCode NVARCHAR(20) = NULL,
    @Country NVARCHAR(100) = NULL,
    @ContactName NVARCHAR(200) = NULL,
    @ContactPhone NVARCHAR(50) = NULL,
    @ContactEmail NVARCHAR(200) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO dbo.Locations (
        LocationId, TenantId, LocationCode, LocationName,
        AddressLine1, AddressLine2, City, StateProvince, PostalCode, Country,
        ContactName, ContactPhone, ContactEmail, IsActive, CreatedDate, ModifiedDate
    )
    VALUES (
        @LocationId, @TenantId, @LocationCode, @LocationName,
        @AddressLine1, @AddressLine2, @City, @StateProvince, @PostalCode, @Country,
        @ContactName, @ContactPhone, @ContactEmail, 1, GETUTCDATE(), GETUTCDATE()
    );

    SELECT LocationId, TenantId, LocationCode, LocationName,
           AddressLine1, AddressLine2, City, StateProvince, PostalCode, Country,
           ContactName, ContactPhone, ContactEmail, IsActive, CreatedDate, ModifiedDate
    FROM dbo.Locations
    WHERE LocationId = @LocationId;
END;

GO


CREATE PROCEDURE dbo.[usp_InspectionDeficiency_GetBySeverity]
      @TenantId UNIQUEIDENTIFIER, @Severity NVARCHAR(20)
AS 
BEGIN
    SET NOCOUNT ON;

    SELECT d.DeficiencyId,
           d.InspectionId,
           d.DeficiencyType,
           d.Severity,
           d.Description,
           d.Status,
           d.ActionRequired,
           d.EstimatedCost,
           d.AssignedToUserId,
           d.DueDate,
           d.CreatedDate,
           i.ExtinguisherId,
           e.AssetTag,
           e.BarcodeData,
           l.LocationName
    FROM dbo.InspectionDeficiencies d
    INNER JOIN dbo.Inspections i
              ON d.InspectionId=i.InspectionId
    INNER JOIN dbo.Extinguishers e
              ON i.ExtinguisherId=e.ExtinguisherId
    LEFT JOIN dbo.Locations l
              ON e.LocationId=l.LocationId
    WHERE i.TenantId=@TenantId
          AND d.Severity=@Severity
          AND d.Status IN('Open', 'InProgress')
    ORDER BY d.CreatedDate DESC;
END;


GO


CREATE   PROCEDURE dbo.usp_Location_Update
    @TenantId UNIQUEIDENTIFIER,
    @LocationId UNIQUEIDENTIFIER,
    @LocationCode NVARCHAR(50),
    @LocationName NVARCHAR(200),
    @AddressLine1 NVARCHAR(200) = NULL,
    @AddressLine2 NVARCHAR(200) = NULL,
    @City NVARCHAR(100) = NULL,
    @StateProvince NVARCHAR(100) = NULL,
    @PostalCode NVARCHAR(20) = NULL,
    @Country NVARCHAR(100) = NULL,
    @ContactName NVARCHAR(200) = NULL,
    @ContactPhone NVARCHAR(50) = NULL,
    @ContactEmail NVARCHAR(200) = NULL,
    @IsActive BIT = 1
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE dbo.Locations
    SET LocationCode = @LocationCode,
        LocationName = @LocationName,
        AddressLine1 = @AddressLine1,
        AddressLine2 = @AddressLine2,
        City = @City,
        StateProvince = @StateProvince,
        PostalCode = @PostalCode,
        Country = @Country,
        ContactName = @ContactName,
        ContactPhone = @ContactPhone,
        ContactEmail = @ContactEmail,
        IsActive = @IsActive,
        ModifiedDate = GETUTCDATE()
    WHERE TenantId = @TenantId
      AND LocationId = @LocationId;

    SELECT LocationId, TenantId, LocationCode, LocationName,
           AddressLine1, AddressLine2, City, StateProvince, PostalCode, Country,
           ContactName, ContactPhone, ContactEmail, IsActive, CreatedDate, ModifiedDate
    FROM dbo.Locations
    WHERE LocationId = @LocationId;
END;

GO


CREATE PROCEDURE dbo.[usp_InspectionDeficiency_GetOpen]
      @TenantId UNIQUEIDENTIFIER
AS 
BEGIN
    SET NOCOUNT ON;

    SELECT d.DeficiencyId,
           d.InspectionId,
           d.DeficiencyType,
           d.Severity,
           d.Description,
           d.Status,
           d.ActionRequired,
           d.EstimatedCost,
           d.AssignedToUserId,
           d.DueDate,
           d.CreatedDate,
           i.ExtinguisherId,
           e.AssetTag,
           e.BarcodeData,
           l.LocationName
    FROM dbo.InspectionDeficiencies d
    INNER JOIN dbo.Inspections i
              ON d.InspectionId=i.InspectionId
    INNER JOIN dbo.Extinguishers e
              ON i.ExtinguisherId=e.ExtinguisherId
    LEFT JOIN dbo.Locations l
              ON e.LocationId=l.LocationId
    WHERE i.TenantId=@TenantId AND d.Status IN('Open', 'InProgress')
    ORDER BY d.Severity DESC, d.CreatedDate DESC;
END;


GO


CREATE   PROCEDURE dbo.usp_Extinguisher_Create
    @ExtinguisherId UNIQUEIDENTIFIER,
    @TenantId UNIQUEIDENTIFIER,
    @LocationId UNIQUEIDENTIFIER,
    @ExtinguisherTypeId UNIQUEIDENTIFIER,
    @AssetTag NVARCHAR(100),
    @BarcodeData NVARCHAR(500) = NULL,
    @Manufacturer NVARCHAR(200) = NULL,
    @Model NVARCHAR(200) = NULL,
    @SerialNumber NVARCHAR(200) = NULL,
    @ManufactureDate DATE = NULL,
    @InstallDate DATE = NULL,
    @LastHydrostaticTestDate DATE = NULL,
    @Capacity NVARCHAR(50) = NULL,
    @LocationDescription NVARCHAR(500) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO dbo.Extinguishers (
        ExtinguisherId, TenantId, LocationId, ExtinguisherTypeId,
        AssetTag, BarcodeData, Manufacturer, Model, SerialNumber,
        ManufactureDate, InstallDate, LastHydrostaticTestDate,
        Capacity, LocationDescription, IsActive, CreatedDate, ModifiedDate
    )
    VALUES (
        @ExtinguisherId, @TenantId, @LocationId, @ExtinguisherTypeId,
        @AssetTag, @BarcodeData, @Manufacturer, @Model, @SerialNumber,
        @ManufactureDate, @InstallDate, @LastHydrostaticTestDate,
        @Capacity, @LocationDescription, 1, GETUTCDATE(), GETUTCDATE()
    );

    -- Return with joins
    SELECT e.ExtinguisherId, e.TenantId, e.LocationId, e.ExtinguisherTypeId,
           e.AssetTag, e.BarcodeData, e.Manufacturer, e.Model, e.SerialNumber,
           e.ManufactureDate, e.InstallDate, e.LastHydrostaticTestDate,
           e.Capacity, e.LocationDescription, e.IsActive, e.CreatedDate, e.ModifiedDate,
           l.LocationName,
           et.TypeName,
           et.TypeCode
    FROM dbo.Extinguishers e
    LEFT JOIN dbo.Locations l ON e.LocationId = l.LocationId
    LEFT JOIN dbo.ExtinguisherTypes et ON e.ExtinguisherTypeId = et.ExtinguisherTypeId
    WHERE e.ExtinguisherId = @ExtinguisherId;
END;

GO


CREATE PROCEDURE dbo.[usp_InspectionDeficiency_Update]
      @DeficiencyId UNIQUEIDENTIFIER,
      @Status NVARCHAR(20) = NULL,
      @ActionRequired NVARCHAR(500) = NULL,
      @EstimatedCost DECIMAL(10, 2) = NULL,
      @AssignedToUserId UNIQUEIDENTIFIER = NULL,
      @DueDate DATE = NULL
AS 
BEGIN
    SET NOCOUNT ON;

    UPDATE dbo.InspectionDeficiencies SET Status = ISNULL(@Status, Status),
                                                                                    ActionRequired = ISNULL(@ActionRequired, ActionRequired),
                                                                                    EstimatedCost = ISNULL(@EstimatedCost, EstimatedCost),
                                                                                    AssignedToUserId = ISNULL(@AssignedToUserId, AssignedToUserId),
                                                                                    DueDate = ISNULL(@DueDate, DueDate),
                                                                                    ModifiedDate = GETUTCDATE()
    WHERE DeficiencyId=@DeficiencyId;
END;


GO


CREATE   PROCEDURE dbo.usp_Extinguisher_Update
    @TenantId UNIQUEIDENTIFIER,
    @ExtinguisherId UNIQUEIDENTIFIER,
    @LocationId UNIQUEIDENTIFIER,
    @ExtinguisherTypeId UNIQUEIDENTIFIER,
    @AssetTag NVARCHAR(100),
    @BarcodeData NVARCHAR(500) = NULL,
    @Manufacturer NVARCHAR(200) = NULL,
    @Model NVARCHAR(200) = NULL,
    @SerialNumber NVARCHAR(200) = NULL,
    @ManufactureDate DATE = NULL,
    @InstallDate DATE = NULL,
    @LastHydrostaticTestDate DATE = NULL,
    @Capacity NVARCHAR(50) = NULL,
    @LocationDescription NVARCHAR(500) = NULL,
    @IsActive BIT = 1
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE dbo.Extinguishers
    SET LocationId = @LocationId,
        ExtinguisherTypeId = @ExtinguisherTypeId,
        AssetTag = @AssetTag,
        BarcodeData = @BarcodeData,
        Manufacturer = @Manufacturer,
        Model = @Model,
        SerialNumber = @SerialNumber,
        ManufactureDate = @ManufactureDate,
        InstallDate = @InstallDate,
        LastHydrostaticTestDate = @LastHydrostaticTestDate,
        Capacity = @Capacity,
        LocationDescription = @LocationDescription,
        IsActive = @IsActive,
        ModifiedDate = GETUTCDATE()
    WHERE TenantId = @TenantId
      AND ExtinguisherId = @ExtinguisherId;

    -- Return with joins
    SELECT e.ExtinguisherId, e.TenantId, e.LocationId, e.ExtinguisherTypeId,
           e.AssetTag, e.BarcodeData, e.Manufacturer, e.Model, e.SerialNumber,
           e.ManufactureDate, e.InstallDate, e.LastHydrostaticTestDate,
           e.Capacity, e.LocationDescription, e.IsActive, e.CreatedDate, e.ModifiedDate,
           l.LocationName,
           et.TypeName,
           et.TypeCode
    FROM dbo.Extinguishers e
    LEFT JOIN dbo.Locations l ON e.LocationId = l.LocationId
    LEFT JOIN dbo.ExtinguisherTypes et ON e.ExtinguisherTypeId = et.ExtinguisherTypeId
    WHERE e.ExtinguisherId = @ExtinguisherId;
END;

GO


CREATE PROCEDURE dbo.[usp_ChecklistTemplate_GetAll]
      @TenantId UNIQUEIDENTIFIER = NULL, @IsActive BIT = 1
AS 
BEGIN
    SET NOCOUNT ON;

    SELECT TemplateId,
           TenantId,
           TemplateName,
           InspectionType,
           Standard,
           IsSystemTemplate,
           IsActive,
           Description,
           CreatedDate,
           ModifiedDate
    FROM dbo.ChecklistTemplates
    WHERE (@TenantId IS NULL
            OR TenantId=@TenantId
            OR TenantId IS NULL) -- System templates + tenant templates

          AND (@IsActive IS NULL OR IsActive=@IsActive)
    ORDER BY InspectionType, TemplateName;
END;


GO


CREATE PROCEDURE dbo.usp_User_Register
    @Email NVARCHAR(256),
    @FirstName NVARCHAR(100),
    @LastName NVARCHAR(100),
    @PasswordHash NVARCHAR(500),
    @PasswordSalt NVARCHAR(500),
    @PhoneNumber NVARCHAR(20) = NULL,
    @UserId UNIQUEIDENTIFIER OUTPUT
AS
BEGIN
    SET NOCOUNT ON

    -- Check if email already exists
    IF EXISTS (SELECT 1 FROM dbo.Users WHERE Email = @Email AND IsActive = 1)
    BEGIN
        RAISERROR('User with this email already exists', 16, 1)
        RETURN
    END

    -- Create new user
    SET @UserId = NEWID()

    INSERT INTO dbo.Users (
        UserId,
        Email,
        FirstName,
        LastName,
        PasswordHash,
        PasswordSalt,
        PhoneNumber,
        EmailConfirmed,
        IsActive,
        CreatedDate,
        ModifiedDate
    )
    VALUES (
        @UserId,
        @Email,
        @FirstName,
        @LastName,
        @PasswordHash,
        @PasswordSalt,
        @PhoneNumber,
        0, -- Email not confirmed by default
        1,
        GETUTCDATE(),
        GETUTCDATE()
    )

    -- Return the created user
    SELECT
        UserId,
        Email,
        FirstName,
        LastName,
        PhoneNumber,
        EmailConfirmed,
        MfaEnabled,
        IsActive,
        CreatedDate,
        ModifiedDate
    FROM dbo.Users
    WHERE UserId = @UserId
END

GO


CREATE PROCEDURE dbo.usp_User_GetByEmail
    @Email NVARCHAR(256)
AS
BEGIN
    SET NOCOUNT ON

    SELECT
        UserId,
        Email,
        FirstName,
        LastName,
        PasswordHash,
        PasswordSalt,
        RefreshToken,
        RefreshTokenExpiryDate,
        LastLoginDate,
        PhoneNumber,
        EmailConfirmed,
        MfaEnabled,
        AzureAdB2CObjectId,
        IsActive,
        CreatedDate,
        ModifiedDate
    FROM dbo.Users
    WHERE Email = @Email AND IsActive = 1
END

GO


CREATE PROCEDURE dbo.usp_User_UpdateRefreshToken
    @UserId UNIQUEIDENTIFIER,
    @RefreshToken NVARCHAR(500),
    @RefreshTokenExpiryDate DATETIME2
AS
BEGIN
    SET NOCOUNT ON

    UPDATE dbo.Users
    SET
        RefreshToken = @RefreshToken,
        RefreshTokenExpiryDate = @RefreshTokenExpiryDate,
        ModifiedDate = GETUTCDATE()
    WHERE UserId = @UserId

    SELECT @@ROWCOUNT AS RowsAffected
END

GO


CREATE PROCEDURE dbo.[usp_Location_GetAll]
      @TenantId UNIQUEIDENTIFIER, @IsActive BIT = NULL
AS 
BEGIN
    SET NOCOUNT ON;

    SELECT LocationId,
           TenantId,
           LocationCode,
           LocationName,
           AddressLine1,
           AddressLine2,
           City,
           StateProvince,
           PostalCode,
           Country,
           Latitude,
           Longitude,
           LocationBarcodeData,
           IsActive,
           CreatedDate,
           ModifiedDate
    FROM dbo.Locations
    WHERE TenantId=@TenantId AND (@IsActive IS NULL OR IsActive=@IsActive)
    ORDER BY LocationName;
END;


GO


CREATE PROCEDURE dbo.[usp_ChecklistTemplate_Create]
      @TenantId UNIQUEIDENTIFIER,
      @TemplateName NVARCHAR(200),
      @InspectionType NVARCHAR(50),
      @Standard NVARCHAR(50),
      @Description NVARCHAR(1000) = NULL,
      @TemplateId UNIQUEIDENTIFIER OUTPUT
AS 
BEGIN
    SET NOCOUNT ON;

    SET @TemplateId = NEWID();

    INSERT dbo.ChecklistTemplates
    (  
       TemplateId,
       TenantId,
       TemplateName,
       InspectionType,
       Standard,
       IsSystemTemplate,
       IsActive,
       Description,
       CreatedDate
    )
    VALUES (  
              @TemplateId,
              @TenantId,
              @TemplateName,
              @InspectionType,
              @Standard,
              0,
              1,
              @Description,
              GETUTCDATE()
           );

    SELECT TemplateId,
           TenantId,
           TemplateName,
           InspectionType,
           Standard,
           IsSystemTemplate,
           IsActive,
           Description,
           CreatedDate,
           ModifiedDate
    FROM dbo.ChecklistTemplates
    WHERE TemplateId=@TemplateId;
END;


GO


CREATE PROCEDURE dbo.usp_User_GetByRefreshToken
    @RefreshToken NVARCHAR(500)
AS
BEGIN
    SET NOCOUNT ON

    SELECT
        UserId,
        Email,
        FirstName,
        LastName,
        RefreshToken,
        RefreshTokenExpiryDate,
        LastLoginDate,
        PhoneNumber,
        EmailConfirmed,
        MfaEnabled,
        IsActive,
        CreatedDate,
        ModifiedDate
    FROM dbo.Users
    WHERE RefreshToken = @RefreshToken
        AND RefreshTokenExpiryDate > GETUTCDATE()
        AND IsActive = 1
END

GO


CREATE PROCEDURE dbo.[usp_ChecklistItem_CreateBatch]
      @TemplateId UNIQUEIDENTIFIER, @ItemsJson NVARCHAR(MAX)
AS 
BEGIN
    SET NOCOUNT ON;

    -- Parse JSON array of checklist items

    INSERT dbo.ChecklistItems
    (  
       TemplateId,
       ItemText,
       ItemDescription,
       [Order],
       Category,
       Required,
       RequiresPhoto,
       RequiresComment,
       PassFailNA,
       VisualAid,
       CreatedDate
    )
    SELECT @TemplateId,
           JSON_VALUE(value, '$.ItemText'),
           JSON_VALUE(value, '$.ItemDescription'),
           JSON_VALUE(value, '$.Order'),
           JSON_VALUE(value, '$.Category'),
           ISNULL(CAST(JSON_VALUE(value, '$.Required') AS BIT), 1),
           ISNULL(CAST(JSON_VALUE(value, '$.RequiresPhoto') AS BIT), 0),
           ISNULL(CAST(JSON_VALUE(value, '$.RequiresComment') AS BIT), 0),
           ISNULL(CAST(JSON_VALUE(value, '$.PassFailNA') AS BIT), 1),
           JSON_VALUE(value, '$.VisualAid'),
           GETUTCDATE()
    FROM OPENJSON(@ItemsJson);

    SELECT @@ROWCOUNT AS ItemsCreated;
END;


GO


CREATE PROCEDURE dbo.usp_User_UpdatePassword
    @UserId UNIQUEIDENTIFIER,
    @PasswordHash NVARCHAR(500),
    @PasswordSalt NVARCHAR(500)
AS
BEGIN
    SET NOCOUNT ON

    UPDATE dbo.Users
    SET
        PasswordHash = @PasswordHash,
        PasswordSalt = @PasswordSalt,
        ModifiedDate = GETUTCDATE()
    WHERE UserId = @UserId

    SELECT @@ROWCOUNT AS RowsAffected
END

GO


CREATE   PROCEDURE dbo.usp_Extinguisher_GetAll
    @TenantId UNIQUEIDENTIFIER,
    @LocationId UNIQUEIDENTIFIER = NULL,
    @ExtinguisherTypeId UNIQUEIDENTIFIER = NULL,
    @IsActive BIT = NULL,
    @IsOutOfService BIT = NULL
AS
BEGIN
    SET NOCOUNT ON;

    SELECT e.ExtinguisherId,
           e.TenantId,
           e.LocationId,
           e.ExtinguisherTypeId,
           e.AssetTag,
           e.BarcodeData,
           e.Manufacturer,
           e.Model,
           e.SerialNumber,
           e.ManufactureDate,
           e.InstallDate,
           e.LastHydrostaticTestDate,
           e.Capacity,
           e.LocationDescription,
           e.IsActive,
           e.IsOutOfService,
           e.CreatedDate,
           e.ModifiedDate,
           l.LocationName,
           et.TypeName,
           et.TypeCode
    FROM dbo.Extinguishers e
    LEFT JOIN dbo.Locations l ON e.LocationId = l.LocationId AND l.TenantId = @TenantId
    LEFT JOIN dbo.ExtinguisherTypes et ON e.ExtinguisherTypeId = et.ExtinguisherTypeId
    WHERE e.TenantId = @TenantId
      AND (@LocationId IS NULL OR e.LocationId = @LocationId)
      AND (@ExtinguisherTypeId IS NULL OR e.ExtinguisherTypeId = @ExtinguisherTypeId)
      AND (@IsActive IS NULL OR e.IsActive = @IsActive)
      AND (@IsOutOfService IS NULL OR e.IsOutOfService = @IsOutOfService)
    ORDER BY l.LocationName, e.AssetTag;
END;

GO


CREATE   PROCEDURE dbo.usp_InspectionType_Update
    @InspectionTypeId UNIQUEIDENTIFIER,
    @TenantId UNIQUEIDENTIFIER,
    @TypeName NVARCHAR(200),
    @Description NVARCHAR(MAX) = NULL,
    @RequiresServiceTechnician BIT = 0,
    @FrequencyDays INT = 365,
    @IsActive BIT = 1
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE dbo.InspectionTypes
    SET TypeName = @TypeName,
        Description = @Description,
        RequiresServiceTechnician = @RequiresServiceTechnician,
        FrequencyDays = @FrequencyDays,
        IsActive = @IsActive
    WHERE InspectionTypeId = @InspectionTypeId
      AND TenantId = @TenantId;

    SELECT InspectionTypeId, TenantId, TypeName, Description,
           RequiresServiceTechnician, FrequencyDays, IsActive, CreatedDate
    FROM dbo.InspectionTypes
    WHERE InspectionTypeId = @InspectionTypeId;
END;

GO


CREATE PROCEDURE dbo.usp_User_UpdateLastLogin
    @UserId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON

    UPDATE dbo.Users
    SET
        LastLoginDate = GETUTCDATE(),
        ModifiedDate = GETUTCDATE()
    WHERE UserId = @UserId

    SELECT @@ROWCOUNT AS RowsAffected
END

GO


CREATE   PROCEDURE dbo.usp_Extinguisher_GetByBarcode
    @TenantId UNIQUEIDENTIFIER,
    @BarcodeData NVARCHAR(500)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT e.ExtinguisherId, e.TenantId, e.LocationId, e.ExtinguisherTypeId,
           e.AssetTag, e.BarcodeData, e.Manufacturer, e.Model, e.SerialNumber,
           e.ManufactureDate, e.InstallDate, e.LastHydrostaticTestDate,
           e.Capacity, e.LocationDescription, e.IsActive, e.CreatedDate, e.ModifiedDate,
           l.LocationName,
           et.TypeName,
           et.TypeCode
    FROM dbo.Extinguishers e
    LEFT JOIN dbo.Locations l ON e.LocationId = l.LocationId
    LEFT JOIN dbo.ExtinguisherTypes et ON e.ExtinguisherTypeId = et.ExtinguisherTypeId
    WHERE e.TenantId = @TenantId
      AND e.BarcodeData = @BarcodeData
      AND e.IsActive = 1;
END;
GO


CREATE PROCEDURE dbo.[usp_InspectionChecklistResponse_CreateBatch]
      @InspectionId UNIQUEIDENTIFIER, @ResponsesJson NVARCHAR(MAX)
AS 
BEGIN
    SET NOCOUNT ON;

    -- Parse JSON array of responses

    INSERT dbo.InspectionChecklistResponses
    (  
       InspectionId,
       ChecklistItemId,
       Response,
       Comment,
       PhotoId,
       CreatedDate
    )
    SELECT @InspectionId,
           CAST(JSON_VALUE(value, '$.ChecklistItemId') AS UNIQUEIDENTIFIER),
           JSON_VALUE(value, '$.Response'),
           JSON_VALUE(value, '$.Comment'),
           CAST(JSON_VALUE(value, '$.PhotoId') AS UNIQUEIDENTIFIER),
           GETUTCDATE()
    FROM OPENJSON(@ResponsesJson);

    SELECT @@ROWCOUNT AS ResponsesCreated;
END;


GO


CREATE PROCEDURE dbo.usp_User_GetRoles
    @UserId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON

    -- Get system roles
    SELECT
        'System' AS RoleType,
        NULL AS TenantId,
        sr.RoleName,
        sr.Description,
        usr.IsActive
    FROM dbo.UserSystemRoles usr
    INNER JOIN dbo.SystemRoles sr ON usr.SystemRoleId = sr.SystemRoleId
    WHERE usr.UserId = @UserId AND usr.IsActive = 1

    UNION ALL

    -- Get tenant roles
    SELECT
        'Tenant' AS RoleType,
        utr.TenantId,
        utr.RoleName,
        t.CompanyName AS Description,
        utr.IsActive
    FROM dbo.UserTenantRoles utr
    INNER JOIN dbo.Tenants t ON utr.TenantId = t.TenantId
    WHERE utr.UserId = @UserId AND utr.IsActive = 1
    ORDER BY RoleType, RoleName
END

GO


CREATE   PROCEDURE dbo.usp_Extinguisher_GetNeedingHydroTest
    @TenantId UNIQUEIDENTIFIER,
    @MonthsAhead INT = 3
AS
BEGIN
    SET NOCOUNT ON;

    SELECT e.ExtinguisherId, e.TenantId, e.LocationId, e.ExtinguisherTypeId,
           e.AssetTag, e.BarcodeData, e.Manufacturer, e.Model, e.SerialNumber,
           e.ManufactureDate, e.InstallDate, e.LastHydrostaticTestDate,
           e.Capacity, e.LocationDescription, e.IsActive, e.CreatedDate, e.ModifiedDate,
           l.LocationName,
           et.TypeName,
           et.TypeCode,
           et.HydrostaticTestYears,
           DATEADD(YEAR, et.HydrostaticTestYears, ISNULL(e.LastHydrostaticTestDate, e.ManufactureDate)) AS NextHydroTestDue
    FROM dbo.Extinguishers e
    LEFT JOIN dbo.Locations l ON e.LocationId = l.LocationId
    LEFT JOIN dbo.ExtinguisherTypes et ON e.ExtinguisherTypeId = et.ExtinguisherTypeId
    WHERE e.TenantId = @TenantId
      AND e.IsActive = 1
      AND et.HydrostaticTestYears IS NOT NULL
      AND DATEADD(YEAR, et.HydrostaticTestYears, ISNULL(e.LastHydrostaticTestDate, e.ManufactureDate)) <= DATEADD(MONTH, @MonthsAhead, GETUTCDATE())
    ORDER BY DATEADD(YEAR, et.HydrostaticTestYears, ISNULL(e.LastHydrostaticTestDate, e.ManufactureDate));
END;
GO


CREATE PROCEDURE dbo.usp_User_ConfirmEmail
    @UserId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON

    UPDATE dbo.Users
    SET
        EmailConfirmed = 1,
        ModifiedDate = GETUTCDATE()
    WHERE UserId = @UserId

    SELECT @@ROWCOUNT AS RowsAffected
END

GO


CREATE   PROCEDURE dbo.usp_Extinguisher_MarkOutOfService
    @TenantId UNIQUEIDENTIFIER,
    @ExtinguisherId UNIQUEIDENTIFIER,
    @Reason NVARCHAR(MAX) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE dbo.Extinguishers
    SET IsActive = 0,
        ModifiedDate = GETUTCDATE()
    WHERE TenantId = @TenantId
      AND ExtinguisherId = @ExtinguisherId;

    -- Return updated record
    SELECT e.ExtinguisherId, e.TenantId, e.LocationId, e.ExtinguisherTypeId,
           e.AssetTag, e.BarcodeData, e.Manufacturer, e.Model, e.SerialNumber,
           e.ManufactureDate, e.InstallDate, e.LastHydrostaticTestDate,
           e.Capacity, e.LocationDescription, e.IsActive, e.CreatedDate, e.ModifiedDate,
           l.LocationName,
           et.TypeName,
           et.TypeCode
    FROM dbo.Extinguishers e
    LEFT JOIN dbo.Locations l ON e.LocationId = l.LocationId
    LEFT JOIN dbo.ExtinguisherTypes et ON e.ExtinguisherTypeId = et.ExtinguisherTypeId
    WHERE e.ExtinguisherId = @ExtinguisherId;
END;
GO


CREATE PROCEDURE dbo.usp_User_AssignToTenant
    @UserId UNIQUEIDENTIFIER,
    @TenantId UNIQUEIDENTIFIER,
    @RoleName NVARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON

    -- Check if user exists
    IF NOT EXISTS (SELECT 1 FROM dbo.Users WHERE UserId = @UserId AND IsActive = 1)
    BEGIN
        RAISERROR('User not found', 16, 1)
        RETURN
    END

    -- Check if tenant exists
    IF NOT EXISTS (SELECT 1 FROM dbo.Tenants WHERE TenantId = @TenantId AND IsActive = 1)
    BEGIN
        RAISERROR('Tenant not found', 16, 1)
        RETURN
    END

    -- Check if assignment already exists
    IF EXISTS (
        SELECT 1 FROM dbo.UserTenantRoles
        WHERE UserId = @UserId AND TenantId = @TenantId AND RoleName = @RoleName AND IsActive = 1
    )
    BEGIN
        RAISERROR('User already assigned to this tenant with this role', 16, 1)
        RETURN
    END

    -- Create assignment
    INSERT INTO dbo.UserTenantRoles (UserId, TenantId, RoleName, IsActive, CreatedDate)
    VALUES (@UserId, @TenantId, @RoleName, 1, GETUTCDATE())

    -- Return the created assignment
    SELECT
        UserTenantRoleId,
        UserId,
        TenantId,
        RoleName,
        IsActive,
        CreatedDate
    FROM dbo.UserTenantRoles
    WHERE UserId = @UserId AND TenantId = @TenantId AND RoleName = @RoleName AND IsActive = 1
END

GO


CREATE   PROCEDURE dbo.usp_Extinguisher_ReturnToService
    @TenantId UNIQUEIDENTIFIER,
    @ExtinguisherId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE dbo.Extinguishers
    SET IsActive = 1,
        ModifiedDate = GETUTCDATE()
    WHERE TenantId = @TenantId
      AND ExtinguisherId = @ExtinguisherId;

    -- Return updated record
    SELECT e.ExtinguisherId, e.TenantId, e.LocationId, e.ExtinguisherTypeId,
           e.AssetTag, e.BarcodeData, e.Manufacturer, e.Model, e.SerialNumber,
           e.ManufactureDate, e.InstallDate, e.LastHydrostaticTestDate,
           e.Capacity, e.LocationDescription, e.IsActive, e.CreatedDate, e.ModifiedDate,
           l.LocationName,
           et.TypeName,
           et.TypeCode
    FROM dbo.Extinguishers e
    LEFT JOIN dbo.Locations l ON e.LocationId = l.LocationId
    LEFT JOIN dbo.ExtinguisherTypes et ON e.ExtinguisherTypeId = et.ExtinguisherTypeId
    WHERE e.ExtinguisherId = @ExtinguisherId;
END;
GO


CREATE PROCEDURE dbo.usp_User_DevLogin
    @Email NVARCHAR(256)
AS
BEGIN
    SET NOCOUNT ON

    -- Return user WITHOUT password verification
    -- This allows instant login for testing
    SELECT
        UserId,
        Email,
        FirstName,
        LastName,
        RefreshToken,
        RefreshTokenExpiryDate,
        LastLoginDate,
        PhoneNumber,
        EmailConfirmed,
        MfaEnabled,
        AzureAdB2CObjectId,
        IsActive,
        CreatedDate,
        ModifiedDate
    FROM dbo.Users
    WHERE Email = @Email AND IsActive = 1

    -- Update last login
    UPDATE dbo.Users
    SET LastLoginDate = GETUTCDATE()
    WHERE Email = @Email AND IsActive = 1
END

GO


CREATE   PROCEDURE dbo.usp_Inspection_Delete
    @TenantId UNIQUEIDENTIFIER,
    @InspectionId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    -- Hard delete (inspections are immutable by design, but allow admin deletion)
    DELETE FROM dbo.Inspections
    WHERE TenantId = @TenantId
      AND InspectionId = @InspectionId;

    SELECT @@ROWCOUNT AS RowsAffected;
END;
GO


-- Recreate with password fields
CREATE PROCEDURE dbo.usp_User_GetById
    @UserId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON

    SELECT
        UserId,
        Email,
        FirstName,
        LastName,
        PasswordHash,
        PasswordSalt,
        RefreshToken,
        RefreshTokenExpiryDate,
        LastLoginDate,
        PhoneNumber,
        EmailConfirmed,
        MfaEnabled,
        AzureAdB2CObjectId,
        IsActive,
        CreatedDate,
        ModifiedDate
    FROM dbo.Users
    WHERE UserId = @UserId
END

GO


CREATE   PROCEDURE dbo.usp_Inspection_GetAll
    @TenantId UNIQUEIDENTIFIER,
    @ExtinguisherId UNIQUEIDENTIFIER = NULL,
    @InspectorUserId UNIQUEIDENTIFIER = NULL,
    @StartDate DATETIME2 = NULL,
    @EndDate DATETIME2 = NULL,
    @InspectionType NVARCHAR(50) = NULL,
    @Passed BIT = NULL
AS
BEGIN
    SET NOCOUNT ON;

    SELECT i.InspectionId,
           i.TenantId,
           i.ExtinguisherId,
           i.InspectionTypeId,
           i.InspectorUserId,
           i.InspectionDate,
           i.InspectionType,
           i.Passed,
           i.GpsLatitude,
           i.GpsLongitude,
           i.GpsAccuracyMeters,
           i.LocationVerified,
           i.IsAccessible,
           i.HasObstructions,
           i.SignageVisible,
           i.SealIntact,
           i.PinInPlace,
           i.NozzleClear,
           i.HoseConditionGood,
           i.GaugeInGreenZone,
           i.GaugePressurePsi,
           i.PhysicalDamagePresent,
           i.DamageDescription,
           i.WeightPounds,
           i.WeightWithinSpec,
           i.InspectionTagAttached,
           i.PreviousInspectionDate,
           i.RequiresService,
           i.RequiresReplacement,
           i.Notes,
           i.FailureReason,
           i.CorrectiveAction,
           i.PhotoUrls,
           i.DataHash,
           i.InspectorSignature,
           i.SignedDate,
           i.IsVerified,
           i.CreatedDate,
           i.ModifiedDate,
           e.AssetTag,
           e.Manufacturer,
           l.LocationName,
           u.FirstName + ' ' + u.LastName AS InspectorName
    FROM dbo.Inspections i
    LEFT JOIN dbo.Extinguishers e ON i.ExtinguisherId = e.ExtinguisherId AND e.TenantId = @TenantId
    LEFT JOIN dbo.Locations l ON e.LocationId = l.LocationId AND l.TenantId = @TenantId
    LEFT JOIN dbo.Users u ON i.InspectorUserId = u.UserId
    WHERE i.TenantId = @TenantId
      AND (@ExtinguisherId IS NULL OR i.ExtinguisherId = @ExtinguisherId)
      AND (@InspectorUserId IS NULL OR i.InspectorUserId = @InspectorUserId)
      AND (@StartDate IS NULL OR i.InspectionDate >= @StartDate)
      AND (@EndDate IS NULL OR i.InspectionDate <= @EndDate)
      AND (@InspectionType IS NULL OR i.InspectionType = @InspectionType)
      AND (@Passed IS NULL OR i.Passed = @Passed)
    ORDER BY i.InspectionDate DESC, i.CreatedDate DESC;
END;

GO

