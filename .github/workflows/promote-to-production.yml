name: Promote Staging to Production

# Required GitHub Secrets:
#   - AZURE_WEBAPP_PUBLISH_PROFILE_PRODUCTION: Azure App Service publish profile for production backend
#   - AZURE_STATIC_WEB_APPS_API_TOKEN_NICE_SMOKE_08DBC500F: Azure Static Web Apps deployment token for production frontend
#
# To obtain these secrets:
#   Backend: Azure Portal ‚Üí fireproof-api-test-2025 ‚Üí Deployment Center ‚Üí Download Publish Profile
#   Frontend: Azure Portal ‚Üí fireproof-ui ‚Üí Overview ‚Üí Manage deployment token

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for promoting staging to production'
        required: true
      confirm_tests_passed:
        description: 'Confirm all staging tests passed'
        required: true
        type: choice
        options:
          - 'Yes - Tests Passed'
          - 'No - Skip Tests'

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18'
  STAGING_API_URL: 'https://staging-api.fireproofapp.net'
  STAGING_FRONTEND_URL: 'https://staging.fireproofapp.net'
  PRODUCTION_API_URL: 'https://api.fireproofapp.net'
  PRODUCTION_FRONTEND_URL: 'https://fireproofapp.net'

jobs:
  validate-promotion:
    name: Validate Staging Environment
    runs-on: ubuntu-latest

    steps:
      - name: Log promotion details
        run: |
          echo "üöÄ Promotion to Production Requested"
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo "Tests confirmed: ${{ github.event.inputs.confirm_tests_passed }}"
          echo "Triggered by: ${{ github.actor }}"

      - name: Test Staging Backend
        run: |
          echo "Testing staging backend health..."
          curl -f ${{ env.STAGING_API_URL }}/health || exit 1

      - name: Test Staging Frontend
        run: |
          echo "Testing staging frontend..."
          curl -f ${{ env.STAGING_FRONTEND_URL }}/ || exit 1

      - name: Test Staging CORS
        run: |
          echo "Testing CORS configuration..."
          curl -I -X OPTIONS ${{ env.STAGING_API_URL }}/api/authentication/login \
            -H "Origin: ${{ env.STAGING_FRONTEND_URL }}" \
            -H "Access-Control-Request-Method: POST" \
            | grep -i "access-control-allow-origin" || exit 1

      - name: Validation Success
        run: |
          echo "‚úÖ Staging environment validation passed"
          echo "Ready to promote to production"

  deploy-backend-production:
    name: Promote Backend to Production
    runs-on: ubuntu-latest
    needs: validate-promotion
    environment:
      name: production-api
      url: https://api.fireproofapp.net

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore backend/FireExtinguisherInspection.API/FireExtinguisherInspection.API.csproj

      - name: Build
        run: dotnet build backend/FireExtinguisherInspection.API/FireExtinguisherInspection.API.csproj --configuration Release --no-restore

      - name: Publish
        run: dotnet publish backend/FireExtinguisherInspection.API/FireExtinguisherInspection.API.csproj --configuration Release --no-build --output ./publish-production

      - name: Deploy to Production API
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'fireproof-api-test-2025'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PRODUCTION }}
          package: ./publish-production

      - name: Wait for production backend to start
        run: sleep 45

      - name: Verify Production Backend
        run: |
          echo "Testing production health endpoint..."
          curl -f ${{ env.PRODUCTION_API_URL }}/health || exit 1

      - name: Test Production CORS
        run: |
          echo "Testing production CORS configuration..."
          curl -I -X OPTIONS ${{ env.PRODUCTION_API_URL }}/api/authentication/login \
            -H "Origin: ${{ env.PRODUCTION_FRONTEND_URL }}" \
            -H "Access-Control-Request-Method: POST" \
            | grep -i "access-control-allow-origin" || exit 1

  deploy-frontend-production:
    name: Promote Frontend to Production
    runs-on: ubuntu-latest
    needs: deploy-backend-production
    environment:
      name: production-frontend
      url: https://fireproofapp.net

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/fire-extinguisher-web/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend/fire-extinguisher-web
          npm ci

      - name: Build with production config
        run: |
          cd frontend/fire-extinguisher-web
          cp .env.production .env.local
          npm run build

      - name: Deploy to Production Frontend
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_NICE_SMOKE_08DBC500F }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: '/frontend/fire-extinguisher-web'
          output_location: 'dist'
          skip_app_build: true

      - name: Wait for frontend deployment
        run: sleep 20

      - name: Verify Production Frontend
        run: |
          echo "Testing production frontend availability..."
          curl -f ${{ env.PRODUCTION_FRONTEND_URL }}/ || exit 1

  create-release-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: [deploy-backend-production, deploy-frontend-production]
    if: needs.deploy-backend-production.result == 'success' && needs.deploy-frontend-production.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create release tag
        run: |
          VERSION="v1.1.2-$(date +%Y%m%d-%H%M%S)"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a $VERSION -m "Production release: ${{ github.event.inputs.reason }}"
          git push origin $VERSION
          echo "Created release tag: $VERSION"

  notify-promotion:
    name: Notify Promotion Success
    runs-on: ubuntu-latest
    needs: [deploy-backend-production, deploy-frontend-production, create-release-tag]
    if: always()

    steps:
      - name: Promotion Success
        if: needs.deploy-backend-production.result == 'success' && needs.deploy-frontend-production.result == 'success'
        run: |
          echo "‚úÖ Staging successfully promoted to production!"
          echo ""
          echo "Production URLs:"
          echo "  Backend: ${{ env.PRODUCTION_API_URL }}"
          echo "  Frontend: ${{ env.PRODUCTION_FRONTEND_URL }}"
          echo ""
          echo "Test the deployment:"
          echo "  - Frontend: ${{ env.PRODUCTION_FRONTEND_URL }}"
          echo "  - API Health: ${{ env.PRODUCTION_API_URL }}/health"
          echo ""
          echo "Promoted by: ${{ github.actor }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo "Release tag created"

      - name: Promotion Failed
        if: needs.deploy-backend-production.result != 'success' || needs.deploy-frontend-production.result != 'success'
        run: |
          echo "‚ùå Production promotion failed!"
          echo "Backend status: ${{ needs.deploy-backend-production.result }}"
          echo "Frontend status: ${{ needs.deploy-frontend-production.result }}"
          exit 1
