name: Deploy to Staging

# Required GitHub Secrets:
#   - AZURE_WEBAPP_PUBLISH_PROFILE_STAGING: Azure App Service publish profile for staging backend
#   - AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING: Azure Static Web Apps deployment token for staging frontend
#
# To obtain these secrets:
#   Backend: Azure Portal → fireproof-api-staging → Deployment Center → Download Publish Profile
#   Frontend: Azure Portal → fireproof-staging → Overview → Manage deployment token

on:
  push:
    branches:
      - staging
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/deploy-staging.yml'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual staging deployment'

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18'
  STAGING_API_URL: 'https://staging-api.fireproofapp.net'
  STAGING_FRONTEND_URL: 'https://staging.fireproofapp.net'

jobs:
  deploy-backend-staging:
    name: Deploy Backend to Staging
    runs-on: ubuntu-latest
    environment:
      name: staging-api
      url: https://staging-api.fireproofapp.net

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore backend/FireExtinguisherInspection.API/FireExtinguisherInspection.API.csproj

      - name: Build
        run: dotnet build backend/FireExtinguisherInspection.API/FireExtinguisherInspection.API.csproj --configuration Release --no-restore

      - name: Publish
        run: dotnet publish backend/FireExtinguisherInspection.API/FireExtinguisherInspection.API.csproj --configuration Release --no-build --output ./publish-staging

      - name: Deploy to Azure Web App (Staging)
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'fireproof-api-staging'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
          package: ./publish-staging

      - name: Wait for API to start
        run: sleep 45

      - name: Test Staging API Health
        run: |
          echo "Testing health endpoint..."
          curl -f ${{ env.STAGING_API_URL }}/health || exit 1

      - name: Test CORS Configuration
        run: |
          echo "Testing CORS headers..."
          curl -I -X OPTIONS ${{ env.STAGING_API_URL }}/api/authentication/login \
            -H "Origin: ${{ env.STAGING_FRONTEND_URL }}" \
            -H "Access-Control-Request-Method: POST" \
            | grep -i "access-control-allow-origin" || exit 1

  deploy-frontend-staging:
    name: Deploy Frontend to Staging
    runs-on: ubuntu-latest
    needs: deploy-backend-staging
    environment:
      name: staging-frontend
      url: https://staging.fireproofapp.net

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/fire-extinguisher-web/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend/fire-extinguisher-web
          npm ci

      - name: Build with staging config
        run: |
          cd frontend/fire-extinguisher-web
          cp .env.staging .env.local
          npm run build

      - name: Deploy to Azure Static Web App (Staging)
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: '/frontend/fire-extinguisher-web'
          output_location: 'dist'
          skip_app_build: true

      - name: Wait for frontend deployment
        run: sleep 20

      - name: Test Staging Frontend
        run: |
          echo "Testing frontend availability..."
          curl -f ${{ env.STAGING_FRONTEND_URL }}/ || exit 1

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-backend-staging, deploy-frontend-staging]
    if: always()

    steps:
      - name: Deployment Success
        if: needs.deploy-backend-staging.result == 'success' && needs.deploy-frontend-staging.result == 'success'
        run: |
          echo "✅ Staging deployment successful!"
          echo "Backend: ${{ env.STAGING_API_URL }}"
          echo "Frontend: ${{ env.STAGING_FRONTEND_URL }}"
          echo ""
          echo "Test the deployment:"
          echo "  - Frontend: ${{ env.STAGING_FRONTEND_URL }}"
          echo "  - API Health: ${{ env.STAGING_API_URL }}/health"

      - name: Deployment Failed
        if: needs.deploy-backend-staging.result != 'success' || needs.deploy-frontend-staging.result != 'success'
        run: |
          echo "❌ Staging deployment failed!"
          echo "Backend status: ${{ needs.deploy-backend-staging.result }}"
          echo "Frontend status: ${{ needs.deploy-frontend-staging.result }}"
          exit 1
